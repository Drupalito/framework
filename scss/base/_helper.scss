
// @file: _helper.scss
// Helpers, classe atomique.

/*doc
---
show: false
title: Inline-block (Elements)
category: Base - Helpers
---

* `.inbl` - Display: inline-block
* `.inbl.atop` - Alignment top (default)
* `.inbl.amiddle` - Alignment middle
* `.inbl.abottom` - Alignment bottom

*/

.container-inline > div,
.inbl { @include inline-block(none); }

.atop { vertical-align: top; }
.abottom { vertical-align: bottom; }
.amiddle { vertical-align: middle; }

.frame {
  border: 1px solid $color-grey-lighter;
  margin-bottom: 1.5em;
  padding: 1em;

  p,
  h2 {
    margin-top: 0;
    margin-bottom: 0;
  }

  &__action a {
    margin-top: .5em;
  }

  @include mq("smaller") {
    &__action a + a {
      margin-lef: .5em;
    }
  }
}

/*doc
---
show: false
title: Hide Elements
category: Base - Helpers
---

* `.show` - Affichage en mode `display-block` !important
* `.hide` ou `.hidden` ou `.none` - Cacher en mode `display-none` !important
* `.invisible` - Cacher `visibility-hidden`

*/

// scss-lint:disable ImportantRule
.hide,
.hidden,
.none { display: none !important; }

.show { display: block !important; }
.invisible { visibility: hidden; }
.overhidden { overflow: hidden; }
.overvisible { overflow: visible; }

// scss-lint:enable ImportantRule

/*doc
---
title: Espacements
category: Base - Helpers
---

Doit être utilisé pour modifier l'espacement par défaut entre les objets (pas entre les noeuds du même objet).

Vous voulez utiliser les valeurs par défaut la plupart du temps, ce sont des exceptions!

`<type><location><size>`

### Type

* `<p>` : padding
* `<m>` : margin

### Location

* `<a>` : all
* `<t>` : top
* `<r>` : right
* `<b>` : bottom
* `<l>` : left
* `<h>` : horizontal
* `<v>` : vertical

### Size

* `<s> small` : #{round($base-line-height / 4)}
* `<m> medium` : #{round($base-line-height / 2)}
* `<l> large` : #{$grid-gutter-width}
* `<n> none` : 0px

### Exemple

* `.mts` : margin top small
* `.mlm` : margin left medium
* `.pal` : padding all large
* `.pbs` : padding bottom small

*/

// scss-lint:disable SingleLinePerSelector ImportantRule EmptyLineBetweenBlocks
.ptn, .pvn, .pan { padding-top: 0 !important; }
.pts, .pvs, .pas { padding-top: round($base-line-height / 4) !important; }
.ptm, .pvm, .pam { padding-top: round($base-line-height / 2) !important; }
.ptl, .pvl, .pal { padding-top: $base-line-height !important; }
.prn, .phn, .pan { padding-right: 0 !important; }
.prs, .phs, .pas { padding-right: round($grid-gutter-width / 4) !important; }
.prm, .phm, .pam { padding-right: round($grid-gutter-width / 2) !important; }
.prl, .phl, .pal { padding-right: $grid-gutter-width !important; }
.pbn, .pvn, .pan { padding-bottom: 0 !important; }
.pbs, .pvs, .pas { padding-bottom: round($base-line-height / 4) !important; }
.pbm, .pvm, .pam { padding-bottom: round($base-line-height / 2) !important; }
.pbl, .pvl, .pal { padding-bottom: $base-line-height !important; }
.pln, .phn, .pan { padding-left: 0 !important; }
.pls, .phs, .pas { padding-left: round($grid-gutter-width / 4) !important; }
.plm, .phm, .pam { padding-left: round($grid-gutter-width / 2) !important; }
.pll, .phl, .pal { padding-left: $grid-gutter-width !important; }
.mtn, .mvn, .man { margin-top: 0 !important; }
.mts, .mvs, .mas { margin-top: round($base-line-height / 4) !important; }
.mtm, .mvm, .mam { margin-top: round($base-line-height / 2) !important; }
.mtl, .mvl, .mal { margin-top: $base-line-height !important; }
.mrn, .mhn, .man { margin-right: 0 !important; }
.mrs, .mhs, .mas { margin-right: round($grid-gutter-width / 4) !important; }
.mrm, .mhm, .mam { margin-right: round($grid-gutter-width / 2) !important; }
.mrl, .mhl, .mal { margin-right: $grid-gutter-width !important; }
.mbn, .mvn, .man { margin-bottom: 0 !important; }
.mbs, .mvs, .mas { margin-bottom: round($base-line-height / 4) !important; }
.mbm, .mvm, .mam { margin-bottom: round($base-line-height / 2) !important; }
.mbl, .mvl, .mal { margin-bottom: $base-line-height !important; }
.mln, .mhn, .man { margin-left: 0 !important; }
.mls, .mhs, .mas { margin-left: round($grid-gutter-width / 4) !important; }
.mlm, .mhm, .mam { margin-left: round($grid-gutter-width / 2) !important; }
.mll, .mhl, .mal { margin-left: $grid-gutter-width !important; }
// scss-lint:enable SingleLinePerSelector ImportantRule EmptyLineBetweenBlocks

//
// Responsive: Visibility classes
// => Bootstrap like
// --------------------------------------------------

.visible-xs,
.visible-sm,
.visible-md,
.visible-lg,
.visible-xs-block,
.visible-xs-inline,
.visible-xs-inline-block,
.visible-sm-block,
.visible-sm-inline,
.visible-sm-inline-block,
.visible-md-block,
.visible-md-inline,
.visible-md-inline-block,
.visible-lg-block,
.visible-lg-inline,
.visible-lg-inline-block {
  display: none !important;
}

@media (max-width: $screen-xs-max) {
  .hidden-xs { display: none !important; }
  .visible-xs,
  .visible-xs-block { display: block !important; }
  .visible-xs-inline-block { display: inline-block !important; }
}

@media (min-width: $screen-sm-min) and (max-width: $screen-sm-max) {
  .hidden-sm { display: none !important; }
  .visible-sm,
  .visible-sm-block { display: block !important; }
  .visible-sm-inline-block { display: inline-block !important; }
}

@media (min-width: $screen-md-min) and (max-width: $screen-md-max) {
  .hidden-md { display: none !important; }
  .visible-md,
  .visible-md-block { display: block !important; }
  .visible-md-inline-block { display: inline-block !important; }
}

@media (min-width: $screen-lg-min) {
  .hidden-lg { display: none !important; }
  .visible-lg,
  .visible-lg-block { display: block !important; }
  .visible-lg-inline-block { display: inline-block !important; }
}

// scss-lint:enable SingleLinePerSelector ImportantRule EmptyLineBetweenBlocks


// @file: _helper.scss
// Helpers, classe atomique

/*doc
---
show: false
title: Couleurs
category: Helpers
versionning:
- version: 1.0
  update: 2017-12-23T10:00:00Z
  owner: Axel Roche
---

Class CSS spécifiques pour gérer les couleurs.

*/

@each $name, $color in $colors {
  .#{$name}-color { color: coloriz($name, base); }
  .#{$name}-border { border-color: coloriz($name, base); }
  .#{$name}-background {
    background-color: coloriz($name, base);
    color: #fff;
  }
  .#{$name}-background--lighter {
    background-color: coloriz($name, lighter);
    color: #fff;
  }
  .#{$name}-background--light {
    background-color: coloriz($name, light);
    color: #fff;
  }
  .#{$name}-background--dark {
    background-color: coloriz($name, dark);
    color: #fff;
  }
}

/*doc
---
title: Clearfix
category: Helpers
versionning:
- version: 1.0
  update: 2017-12-23T10:00:00Z
  owner: Axel Roche
---

Micro Clearfix to clear floats. [http://nicolasgallagher.com/micro-clearfix-hack/](http://nicolasgallagher.com/micro-clearfix-hack/){:rel="external"}

Pour être efficace, les divs interieurs doivent être des blocs floattant (float).  
Deux moyens pour l'utiliser

| Exemple    | CSS          |
| ---------- | ------------ |
| HTML       | <div class="clearfix"></div> |
| SCSS       |.custom {<br/>&nbsp;&nbsp;@extend %clearfix;<br/> } |

```html
  <div class="clearfix">
    <p class="pull-left my-0">Paragraphe gauche</p>
    <p class="pull-right my-0">Paragraphe droite</p>
  </div>
```

*/

/// Clearfix extend
/// @example scss - Usage SCSS
///   .foo {
///     @extend %clearfix;
///   }
%clearfix {
  &:after {
    clear: both;
    content: "";
    display: table;
  }
}

.clearfix {
  @extend %clearfix;
}

/*doc
---
title: A11Y
category: Helpers
notes:
  - ([RGAA - Critère 10.13 [A] Pour chaque page web, les textes cachés sont-ils correctement affichés pour être restitués par les technologies d'assistance ?](https://references.modernisation.gouv.fr/critere-1013-pour-chaque-page-web-les-textes-caches-sont-ils-correctement-affiches-pour-etre-0))
keywords:
  - a11y
  - hide
  - accessibilité
  - rgaa
  - cacher
versionning:
- version: 1.0
  update: 2017-12-23T10:00:00Z
  owner: Axel Roche
---

La classe CSS `.a11y` ou `.element-invisible` permet de cacher un texte de manière accessible.  
Le contenu reste visible par les robots et assistants.

**Conforme avec le référentiel d'accessibilité RGAA.**

```html
  <div class="a11y">
    <p>Texte caché, visible par les robots et assistants</p>
  </div>
````

*/

.a11y,
.element-invisible {
  border: 0 !important;
  clip: rect(1px, 1px, 1px, 1px) !important;
  -webkit-clip-path: inset(50%) !important;
  clip-path: inset(50%) !important;
  height: 1px !important;
  overflow: hidden !important;
  padding: 0 !important;
  position: absolute !important;
  width: 1px !important;
  white-space: nowrap !important;
}

/*doc
---
show: false
title: Inline-block (Elements)
category: Helpers
versionning:
- version: 1.0
  update: 2017-12-23T10:00:00Z
  owner: Axel Roche
---

* `.inbl` - Display: inline-block
* `.inbl.atop` - Alignment top (default)
* `.inbl.amiddle` - Alignment middle
* `.inbl.abottom` - Alignment bottom

*/

.container-inline > div,
.inbl { @include inline-block(none); }

.atop { vertical-align: top; }
.abottom { vertical-align: bottom; }
.amiddle { vertical-align: middle; }

/*doc
---
show: false
title: Hide Elements
category: Helpers
versionning:
- version: 1.0
  update: 2017-12-23T10:00:00Z
  owner: Axel Roche
---

* `.show` - Affichage en mode `display-block` !important
* `.hide` ou `.hidden` ou `.none` - Cacher en mode `display-none` !important
* `.invisible` - Cacher `visibility-hidden`

*/

// scss-lint:disable ImportantRule
.hide,
.hidden,
.none { display: none !important; }

// .show { display: block !important; }
.invisible { visibility: hidden; }
.overhidden { overflow: hidden; }
.overvisible { overflow: visible; }
// scss-lint:enable ImportantRule
